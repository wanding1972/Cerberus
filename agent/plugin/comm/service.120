#!/usr/bin/perl
use strict;
use File::Spec;
my $path_curf = File::Spec->rel2abs(__FILE__);
my ($vol, $path, $file) = File::Spec->splitpath($path_curf);

my $home = "$path/../../..";
require "$path/../../conf/global.conf";
require "$path/../../lib/funcs.pl";
require "$path/../../lib/service.pl";
$ENV{'LC_ALL'} = 'C';

my $app = "service";
my $option = argOption();
if($option =~ /v/){
        $main::LOGLEVEL=1;
        $|=1;
}else{
	dupProcess($file);
}

if($ARGV[0] eq 'help'){
	print "Usage: $file -v -a [servicename]\n";
	exit 0;
}
my $serviceConf = "$path/../../conf/service.rule";
if( -e $serviceConf){
	require $serviceConf;
}


my $regFile = "$path/../../../run/tmp/regEvents.service";
my %regEvents = readHash($regFile);
my @eventLst = ();
foreach my $servicename (keys(%main::service)){
	next if (defined $ARGV[0] && $servicename !~ /$ARGV[0]/);
	if( hasService($servicename) == 0){
		debug("No $servicename on this host") ;
		next;
	}
	my $hashref = $main::service{$servicename};
	my $paraname;
	my $checkResult='';
	my $index = "";
	#iterate the check item of each service
	foreach $paraname (keys(%$hashref)){
		my $arrayref = $$hashref{$paraname};
		my $value1 = $$arrayref[0];
		my $value2 = $$arrayref[1];
		my $retval = 'ok';
		$index = $paraname;
		$retval = paraChk($paraname,$value1,$value2);
		if(($retval ne 'ok')&&($retval ne 'failed')){
			$checkResult = "$paraname: $retval ($value1)";
			last;
		}
	}
	my $key = "serviceFault,$app.$index,$servicename";
	if($checkResult ne ''){ 
		push(@eventLst,"serviceFault,$app.$index,$servicename,$checkResult OCCUR");
		debug("service: $servicename is FAIL, $checkResult");
		if($option =~ /a/ && exists $main::serviceAuto{$servicename}){
			my $autoOut = system("$path/../../tools/supervisor.pl -v stop $servicename >> /tmp/service.txt");
			   $autoOut .= system("$path/../../tools/supervisor.pl -v start $servicename");
			   debug("serviceRestart:  $main::serviceAuto{$servicename}{'start'}  return : $autoOut");
		}
		if(!exists $regEvents{$key}){
			$regEvents{$key} = 1;
		}else{
			$regEvents{$key} = $regEvents{$key} +1;
		}
	}else{
		debug("service: $servicename is OK");
		if( exists $regEvents{$key}){
			push(@eventLst,"serviceFault,$app.$index,$servicename,$checkResult RECOVER");
			delete $regEvents{$key};
		}
		my $cmd = "$path/../../../run/tmp/$servicename".'.srv';
		`touch $cmd`;
	}
}


my $dirData = "$path/../../../run/queue/evt1";
my $eventFile = "$dirData/eventService.".curtime().".dat";
if($#eventLst >=0){
        if(open(FILE,">$eventFile")){
                 foreach my $item (@eventLst){
                       print FILE  "$item\n";
                }
                close(FILE);
        }
}
writeHash(\%regEvents,$regFile);
my $file = "$path/../../../run/tmp/$app.pid";
`echo $$ > $file`;


sub paraChk{
	my($paraname,$value1,$value2) = @_;
	my $retval = "ok";
	SWITCH:{
		if($paraname =~ /ps_count/){
			$retval = chkProcess($value1,$value2);
			last SWITCH;
		}
		if($paraname =~ /file_mtime/){
			$retval = chkFileTime($value1,$value2);
			last SWITCH;
		}	
		if($paraname =~ /file_size/){
				$retval = chkFileSize($value1,$value2);
				last SWITCH;
		}       
		if($paraname =~ /file_content/){
				$retval = chkFileError($value1,$value2);	
				last SWITCH;
		}       
		if($paraname =~ /dir_file/){
				$retval = chkDirFile($value1,$value2);
				last SWITCH;
		}       
		if($paraname =~ /proc_timeout/){
				$retval = chkProcTimeout($value1,$value2);
				last SWITCH;
		} 
		if($paraname =~ /tcp_connect/){
				$retval = chkTCP($value1,$value2);
				last SWITCH;
		}       
		if($paraname =~ /http_connect/){
				$retval = chkHTTP($value1,$value2);
				last SWITCH;
		}
                if($paraname =~ /exec_cmd/){
                                $retval = chkCmd($value1,$value2);
                                last SWITCH;
                }
                if($paraname =~ /cron/){
                                $retval = chkCron($value1,$value2);
                                last SWITCH;
                }    
		DEFAULT:{
			last SWITCH;
		}
	}
	return $retval;
}
