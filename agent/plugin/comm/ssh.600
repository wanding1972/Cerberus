#!/usr/bin/perl
use strict;
use File::Spec;
use File::Basename;
use Env;
use Expect;
my $path_curf = File::Spec->rel2abs(__FILE__);
my ($vol, $path, $file) = File::Spec->splitpath($path_curf);

$ENV{'LC_ALL'} = 'C';
if ( -e "$path/../../conf/local.conf"){
	require "$path/../../conf/local.conf";
}
require "$path/../../lib/funcs.pl";
exit if($main::ROLE eq 'INDIRECT' || $main::ROLE eq 'DIRECT');

my $app = "ssh";
my $option = argOption();
if($option =~ /v/){
        $main::LOGLEVEL=1;
        $|=1;
}else{
	dupProcess($file);
}

my $regFile = "$path/../../../run/tmp/regEvents.ssh";
my %regEvents = readHash($regFile);

my @eventLst = ();
my $fileName = "$path/../../conf/host.lst";
if(open(FILE,$fileName)){
        my @lines = <FILE>;
        foreach my $line (@lines){
                next if($line =~/^#/);
                chomp($line);
                my @tokens = split /[ \t,]+/,$line;
                my $ip = $tokens[0];
                my $port = defined $tokens[2]? $tokens[2]:22;
		next if (defined $ARGV[0] && $ip !~ /$ARGV[0]/);
		my $ret = testSSH($ip,$port,'sshchecker');
		my $key = "sshFailed,$app.isAlived,$ip";
		if($ret eq 'failed'){
			push(@eventLst,"sshFailed,$app.isAlived,$ip,ssh from $main::LOOPADDRESS to $ip $ret OCCUR");
			debug("FAIL: ssh from $main::LOOPADDRESS to $ip $ret");
			if(!exists $regEvents{$key}){
				$regEvents{$key} = 1;
			}else{
				$regEvents{$key} = $regEvents{$key} +1;
			}
		}else{
			debug("OK: ssh from $main::LOOPADDRESS to $ip $ret");
			if( exists $regEvents{$key}){
				push(@eventLst,"sshFailed,$app.isAlived,$ip,ssh from $main::LOOPADDRESS to $ip $ret RECOVER");
				delete $regEvents{$key};
			}
		}
        }
        close(FILE);
}else{
	print "$fileName not existed\n";
}
my $dirData = "$path/../../../run/queue/evt1";
my $eventFile = "$dirData/eventService.".curtime().".dat";
if($#eventLst >=0){
        if(open(FILE,">$eventFile")){
                 foreach my $item (@eventLst){
                       print FILE  "$item\n";
                }
                close(FILE);
        }
}
writeHash(\%regEvents,$regFile);
my $file = "$path/../../../run/tmp/$app.pid";
`echo $$ > $file`;
info("$0 finished");


sub testSSH{
	my ($ip,$port,$user)=@_;
	my $PROMPT = '[\#\$\>\%\]]\s*$';
	my $regPass = "[Pp]assword:";
	my $sess=new Expect;
	my $command = "ssh -o 'StrictHostKeyChecking no' -o ConnectTimeout=60  -l $user -p $port $ip ";
	$sess = Expect->spawn( $command );
	$sess->log_stdout(0);
	if(! $sess){
		print "Couldn't spawn ssh,$!\n";
	}
	$sess->expect(50,
				[
					qr/$regPass/i,
					sub { }
				 ],  -re => $PROMPT
	);
	my $match=$sess->match();
	$sess->log_stdout(1);
	if($match =~ /$regPass/) {
		return "ok";
	}else{
		return 'failed';
	}
}
