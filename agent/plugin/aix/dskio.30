#!/usr/bin/perl
use strict;
use File::Spec;
my $path_curf = File::Spec->rel2abs(__FILE__);
my ($vol, $path, $file) = File::Spec->splitpath($path_curf);
require "$path/../../conf/global.conf";
require "$path/../../lib/funcs.pl";
require "$path/../../lib/command.pl";

$ENV{'LC_ALL'} = 'C';
my $app = 'dskio';
dupProcess($file);
my @res = ioplugin();
if($#res >0){
	`echo $$ > $path/../../../run/tmp/$app.pid`;
}


sub ioplugin{
	my @data= ioparse(mycmds('iostat'));
        my $file = "$path/../../../run/data/perf/$app.".curtime().".dat";
        writeArray($file,\@data);
        my $dstfile = "$path/../../../run/queue/current/";
	`cp $file $dstfile`;
	return @data;
}


sub ioparse{
	my(@lines) = @_;
	my @perf = ();
       foreach my $line (@lines){
                        if( ($line =~/hdisk/)){
                                        chomp($line);
                                        $line=~s/^\s*|\s*$//g;
                                        my @tokens = split / +/,$line;
                                        my ($disk,$util,$rw,$await);
                                        if($tokens[1] =~ /hdisk\d/){
                                                $disk = $tokens[1];
                                                $util = $tokens[2];
                                                $rw =   $tokens[4];
                                                $await = $tokens[6];
                                        }else{
                                                $disk = $tokens[0];
                                                $util = $tokens[1];
                                                $rw =   $tokens[3];
                                                $await = $tokens[5];
                                        }
			push(@perf,[$app,'r/s',$disk,$rw]);
			push(@perf,[$app,'w/s',$disk,$rw]);
			push(@perf,[$app,'util',$disk,$util]);
                        }
        }
	return @perf;	
}


1
